迷宫的最短路径

给定一个大小为N*M的迷宫。迷宫由通道和墙壁组成，每一步可以向邻接的上下左右四格
的通道移动。求起点到终点所需的最小步数。（假定从起点一定可以移动到终点）




N,M<=100（限制条件）

输入
N = 10,M = 10（‘#’，‘.','S','G'分别表示墙壁，通道，起点和终点）

#S######.#
......#..#
.#.##.##.#
.#........
##.##.####
....#....#
.#######.#
....#.....
.####.###.
....#...G#

输出：22


const int INF = 100 000 000;

typedef pair<int, int> P;

//输入
char maze[MAX_N][MAX_M+1];
int N,M;
int sx, sy;
int gx, gy;

int d[MAX_N][MAX_M];

int dx[4] = {1,0,-1,0}, dy[4] = {0, 1, 0 ,-1};

int bfs()
{
   queue<P> que;
   
   for(int i = 0;i < N; i++)
      for(int j = 0;j < M; j++)  d[i][j] = INF;
      que.push (P (sx, sy));
      d[sx] [sy] = 0;
      
    
    while (que.size())
  {
      P = que.front(); que.pop();
    
    if(P.first == gx && P.second == gy)  break;
    
    for(int i = o; i < 4; i++)
       {
         int nx = P.first + dx[i], ny = P.second + dy[i];
         
         if(0 <= nx && nx < N && 0 <= ny && ny < M && maze[nx] [ny] != '#' &&
             d[nx] [ny] == INF) 
             {
               que.push( P (nx ,ny));
               d[nx] [ny] = d[P.first] [P.second] +1;
              }
        }
    }
    
    return d[gx] [gy];
}    
             
    
    
   void  solve()
   {
     int res = bfs();
     printf("%d\n,res);
    }
    
    
    
    
    
    
    
    
    
    
      
